[Description("")]
[FormDesignerId("B024EA57-AF38-4736-9BA0-8C4316007286")]
[PredeclaredId]
Class frmViewHistoryLog

    Sub New()
    End Sub
    
    Dim logContents As New colHistoryLogItems
    
    Private Sub Form_Load()
        
        With btnDeleteLog
            .Caption = "Delete Log"
            .BackColor = &HA2640C
            .ForeColor = vbWhite  ' White
            .FontSize = 11
            .HoverColor = RGB(18, 40, 234) ' Darker blue
            .BorderRadius = 6
            .FontBold = True
            .PngIconPath = App.Path & "\delete.png"
            .IconSize = 16
            .IconSpacing = 8
            .Enabled = False
        End With
        
        SetupActivityLog
        
        If Not FillLogHistoryGrid Then
            'UpdateStatusPanel ""
            btnDeleteLog.Enabled = False
            Exit Sub
        End If
        
        Form1.ShowStatusMessage "- loaded", True
    End Sub

    Private Sub Form_Unload(Cancel As Integer)
        Set logContents = Nothing
        Form1.ShowStatusMessage "View log closed"
    End Sub
    
    Private Sub btnDeleteLog_Click()
        
        ' user wishes to delete the current log.txt file
        If MsgBox("Are you sure you want to delete the log.txt file?", vbYesNo, "Confirmation") = vbNo Then Exit Sub
        
        fso.DeleteFile(App.Path & "\log.txt")
        Form1.ShowStatusMessage "Log.txt has been deleted."
        
        If tbHelperSettings.LogActivity Then
            tbHelperSettings.LogActivity = MsgBox("The setting to write to a log file is still active. Should this be turned off?", vbYesNo, "Write to log File") = vbNo
            Form1.tsLogActivity = tbHelperSettings.LogActivity
        End If
        
        clgView.ClearEntries()
        
        DatePicker.Cls()
        lbDropdown.Clear()
        
    End Sub
    
    Private Sub SetupActivityLog()
        
        Dim clgColumns(3) As New clsChangeLogColumn
        clgColumns(0).Name = "Date Time"
        clgColumns(0).Width = 150
        clgColumns(0).WrappedEnabled = False
        
        clgColumns(1).Name = "Version"
        clgColumns(1).Width = 70
        clgColumns(1).WrappedEnabled = False

        clgColumns(2).Name = "Type"
        clgColumns(2).Width = 140
        clgColumns(2).WrappedEnabled = False
        
        clgColumns(3).Name = "Description"
        clgColumns(3).Width = 400
        clgColumns(3).WrappedEnabled = True
        
        clgView.SetColumns = clgColumns
        
    End Sub
    
    Private Sub DatePicker_DropDown()

        ' toggle the dropdown if it is visible
        If lbDropdown.Visible Then
            HideZipList()
            Exit Sub
        End If

        ' Find the currently selected version in the list and highlight it
        Dim i As Long
        For i = 0 To lbDropdown.ListCount - 1
            If lbDropdown.List(i) = DatePicker.Item Then
                lbDropdown.ListIndex = i
                Exit For
            End If
        Next i

        Const BORDER_SIZE As Long = 15 ' 1 pixel in Twips
        Const LIST_HEIGHT As Long = 1200
        
        With lbDropdown
            .Width = DatePicker.Width - (BORDER_SIZE * 2)
            .Height = LIST_HEIGHT
            .Left = DatePicker.Left
            .Top = DatePicker.Top + DatePicker.Height
            .Visible = True
        End With

        With picDropDownBorder
            .Move lbDropdown.Left - BORDER_SIZE, _
                    lbDropdown.Top - BORDER_SIZE, _
                    lbDropdown.Width + (BORDER_SIZE * 2), _ 
                    lbDropdown.Height + (BORDER_SIZE * 2)
            .Visible = True
        End With

        ApplyBottomRoundedCorners picDropDownBorder, 4, 4 ' Apply to the border first
        ApplyBottomRoundedCorners lbDropdown, 4, 4, True         ' Then apply to the listbox
            
        BringWindowToTop picDropDownBorder.hWnd ' Bring border to the top
        BringWindowToTop lbDropdown.hWnd
        
    End Sub
    
    Private Sub HideZipList()
    
        lbDropdown.Visible = False
        picDropDownBorder.Visible = False
    
    End Sub
    
    Private Sub lbDropdown_Click()
        If lbDropdown.ListIndex > -1 Then
            
            DatePicker.Item = lbDropdown.Text ' Update the picker display
            DatePicker.Collapse()
            
            ' Hide the list
            HideZipList
        End If
    End Sub
    
    Private Sub Form_Click()
        DatePicker.Collapse()
        HideZipList
    End Sub
    
    Public Function FillLogHistoryGrid(Optional ViewDate As String = "") As Boolean
    
        ' open the log text file and display it in the flexgrid

        Dim logItem As clsHistoryLogItem
        Dim itemColor As Long
        Dim colNum As Integer
    
        If Not logContents.LoadLog Then
            MsgBox("There was an issue reading the log file", vbExclamation, "View log")
            FillLogHistoryGrid = False
            Exit Function
        End If
    
        clgView.ClearEntries()
        For Each logItem In logContents
            With clgView
                If Len(ViewDate) = 0 Or logItem.LogDate = ViewDate Or ViewDate = "Show All" Then
            
                    If logItem.LogCLI.tBVersion = 0 Then
                        .AddEntry(logItem.LogDateTime, "", "", logItem.LogMessage)
                    Else
                        .AddEntry(logItem.LogDateTime, logItem.LogCLI.tBVersion, logItem.LogCLI.Type, logItem.LogCLI.Notes)
                    End If
                
                End If
            
            End With
            DoEvents()
        
        Next
    
        If Len(ViewDate) = 0 Then
            ' fill the dropdown with the unique dates from the log file
            ' just during the first time through this
            Dim logDate As String
        
            With lbDropdown
                .Clear()
                .AddItem("Show All")()
                For Each logDate In logContents.HistoryLogDates
                    .AddItem(logDate)
                Next
                .ListIndex = 0
            End With
        End If
    
        FillLogHistoryGrid = True
    End Function
    
End Class