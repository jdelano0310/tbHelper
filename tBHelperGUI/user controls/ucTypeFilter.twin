[Description("")]
[FormDesignerId("9450CC1A-D954-4C3E-9705-3FE4421C3495")]
[ClassId("0F01B66C-36E5-48C3-A99E-C75E1BE32D94")]
[InterfaceId("BB2DC4F9-83F1-4023-9142-1B78D2AD20F6")]
[EventInterfaceId("53DDADD3-CCD3-4905-970C-E2D48B569E5B")]
[COMControl]
Class ucTypeFilter
    
    Private Declare Function CreateRoundRectRgn Lib "gdi32" ( _
    ByVal X1 As Long, ByVal Y1 As Long, _
    ByVal X2 As Long, ByVal Y2 As Long, _
    ByVal X3 As Long, ByVal Y3 As Long) As Long
    
    Private Declare Function SetWindowRgn Lib "user32" ( _
    ByVal hWnd As Long, ByVal hRgn As Long, _
    ByVal bRedraw As Boolean) As Long
    
    Sub New()
    End Sub

    Option Explicit

    Private m_Active As Boolean
    Private m_TypeName As String
    Private m_Backcolor As Long
    Private m_WidthOverride As Long
    Private m_FontSize As Integer
    Private m_BorderRadius As Integer

    Public Property Get WidthOverride() As Long
        WidthOverride = m_WidthOverride
    End Property

    Public Property Let WidthOverride(ByVal Value As Long)
        m_WidthOverride = Value
        UserControl.Width = IIf(Value > 0, Value, CalcAutoWidth())
        lblCaption.Width = UserControl.Width
    End Property

    Public Property Get BorderRadius() As Integer
        BorderRadius = m_BorderRadius
    End Property

    Public Property Let BorderRadius(ByVal Value As Integer)
        m_BorderRadius = Value
    End Property
    
    Public Property Get FontSize() As Integer
        FontSize = m_FontSize
    End Property

    Public Property Let FontSize(ByVal Value As Integer)
        m_FontSize = Value
        lblCaption.FontSize = Value
    End Property

    Public Property Get TypeName() As String
        TypeName = m_TypeName
    End Property

    Public Property Let TypeName(ByVal Value As String)
        m_TypeName = Value
        lblCaption.Caption = Value
    End Property
    
    Public Property Get Backcolor() As Long
        Backcolor = m_Backcolor
    End Property

    Public Property Let Backcolor(ByVal Value As Long)
        m_Backcolor = Value
        lblCaption.BackColor = Value
        UserControl.BackColor = Value
        ApplyPillShape
        UserControl.Refresh
    End Property
 
    Public Property Get Active() As Boolean
        Active = m_Active
    End Property

    Public Property Let Active(ByVal Value As Boolean)
        m_Active = Value
        UpdateAppearance
    End Property

    Public Event StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
    Public Event Click(ByVal TypeName As String)

    Private Sub lblCaption_Click()
        
        m_Active = Not m_Active
        UpdateAppearance
        RaiseEvent StateChanged(m_TypeName, m_Active)
    End Sub

    Private Sub UpdateAppearance()
        
        ' change the look to indicate the type is included in the filter
        If m_Active Then
            lblCaption.BackColor = m_Backcolor ' change back to the selected color
            lblCaption.ForeColor = vbWhite
        Else
            lblCaption.BackColor = &HCCCCCC ' Grey when inactive
            lblCaption.ForeColor = vbBlack
        End If
    End Sub

    Private Sub UserControl_Initialize()
        
        lblCaption.Alignment = vbCenter
        lblCaption.BackStyle = 1
        lblCaption.BorderStyle = 0
        lblCaption.FontBold = False
                
        If m_WidthOverride = 0 Then
            UserControl.Width = CalcAutoWidth()
        End If
        
        m_Active = True ' Default ON
        UpdateAppearance
    End Sub
    
    Private Function CalcAutoWidth() As Long
        ' A rough estimate: average character width Ã— number of letters + padding
        Const charWidth As Long = 90 ' Approx. width per character in twips
        CalcAutoWidth = Len(lblCaption.Caption) * charWidth + 300
    End Function
    
    Private Sub UserControl_Resize()
        lblCaption.Move 0, 0, ScaleWidth, ScaleHeight
        ApplyPillShape
    End Sub
     
    Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
        ' Called at design time after loading
        ApplyPillShape
    End Sub

    Private Sub ApplyPillShape()
        
        ' updated to lessen the curve of the button
        If Width <= 0 Or Height <= 0 Or m_BorderRadius = 0 Then Exit Sub

        Dim w As Long, h As Long, r As Long
        w = Width \ Screen.TwipsPerPixelX
        h = Height \ Screen.TwipsPerPixelY
        r = h \ m_BorderRadius

        Dim rgn As Long
        rgn = CreateRoundRectRgn(0, 0, w, h, r, r)

        If rgn And Ambient.UserMode Then
            SetWindowRgn UserControl.hWnd, rgn, True
        End If
    End Sub
End Class