[Description("")]
[FormDesignerId("8CA8AA1D-C672-4662-A724-D05EB1E09148")]
[PredeclaredId]
Class Form1
    Dim loadingSettingsFromFile As Boolean
    Dim _downloadIcon As String
    Dim _checkForNewIcon As String
    Dim activeTypeFilters As Scripting.Dictionary
    
    Private Sub Form_Load()
        
        Set fso = New FileSystemObject
       
        _downloadIcon = App.Path & "\download.png"
        _checkForNewIcon = App.Path & "\binoculars.png"
        
        loadingSettingsFromFile = True
        Set tbHelperSettings = New clsSettings
        Set tbHelperClass = New clstBHelper
        
        ' configure the custom controls on the main form
        SetupTypeFilterButtons
        SetupSettingsToggleSliders
        SetupCustomButtons
        SetChangeLogHeader
        
        Me.Show
        Me.MousePointer = vbHourglass
        'DoEvents()
        
        Set activeTypeFilters = New Scripting.Dictionary
        Set activityLog = actLog
        
        ShowStatusMessage "Checking for Settings file"
        
        If tbHelperSettings.SettingsFileLoaded Then
            LoadSettingsIntoForm()
            ShowStatusMessage "loaded", True
        Else
            ShowStatusMessage "Not found", True
        End If
        'DoEvents()
        loadingSettingsFromFile = False

        If FoldersAreValid Then
            ' get the version of twinBASIC that is currently in the folder
            lblCurrentTBVersion.Caption = "Installed version: " & GetCurrentTBVersion(txttBFolderLocation.Text)
            If tbHelperClass.InstalledtBVersion = 0 Then
                txttBFolderLocation.BackColor = vbRed
            Else
                lblCurrentTBVersion.Visible = True
            End If
        Else
            btnDownload.Enabled = False
        End If
        
        ' enable or disable view log button
        btnViewLogHistory.Enabled = fso.FileExists(App.Path & "\log.txt")
        
        'DoEvents()
        
        ' this contiues to check for version info if the folders are valid
        If tbHelperSettings.CheckForNewVersionOnLoad Then
            CheckForNewVersion
            
            If chgLogs.Count > 0 Then
                SetInitialTypeFilters()
            End If
            
        ElseIf FoldersAreValid Then
            btnDownload.Caption = "Check for new version"
            btnDownload.PngIconPath = [_checkForNewIcon]
        Else
            ' TODO: I started something here but what I don't recall
        End If
        
        EnableDownloadZipButton()
        
        Me.MousePointer = vbDefault
    End Sub

    Private Sub Form_Unload(Cancel As Integer)

        ' check for exit application procedures
        If tbHelperSettings.SettingsChanged Then tbHelperSettings.SaveSettings()
        
        If tbHelperSettings.LogActivity Then WriteToLogFile

        Set tbHelperSettings = Nothing
        Set tbHelperClass = Nothing
        Set activeTypeFilters = Nothing
        
        'WriteToDebugFile "CLOSE" ' this tells the procedure to close the debug log file 
        
        Set fso = Nothing
        
    End Sub
    
    Private Sub btnSelectDownloadFolder_Click()
        
        Dim Dlg As New frmSelectFolder
        Dim Path As String
    
        If Len(tbHelperSettings.DownloadFolder) > 0 Then Dlg.SelectedPath = tbHelperSettings.DownloadFolder
        Dlg.Caption = "Select Download folder"
        
        Path = Dlg.ShowAsDialog()
    
        If Len(Path) > 0 Then
            If Right(Path, 1) <> "\" Then Path = Path & "\"
            txtDownloadFolder.Text = Path
            tbHelperSettings.DownloadFolder = Path
        Else
            MessageBox("You didn’t choose a folder, [b]so the operation was cancelled[/b].", , "No selection")
        End If
                
        Dlg.Close()
    End Sub
    
    Private Sub btnSelecttBFolderLocation_Click()
        Dim Dlg As New frmSelectFolder
        Dim Path As String
    
        If Len(tbHelperSettings.twinBASICFolder) > 0 Then Dlg.SelectedPath = tbHelperSettings.twinBASICFolder
        Dlg.Caption = "Select twinBASIC folder"
        
        Path = Dlg.ShowAsDialog()
    
        If Len(Path) > 0 Then
            If Right(Path, 1) <> "\" Then Path = Path & "\"
            txttBFolderLocation.Text = Path
            tbHelperSettings.twinBASICFolder = Path
        Else
            MessageBox("You didn’t choose a folder, [b]so the operation was cancelled[/b].", , "No selection")
        End If
                
        Dlg.Close()
    End Sub
    
    Private Sub btnRevert_Click()
        
        Dim frm As New frmRevert
        frm.Show(vbModal)
        Unload(frm)
        ShowStatusMessage "Closed revert form"
        
    End Sub
    
    Private Sub btnViewLogHistory_Click()
        

        Dim frm As New frmViewHistoryLog
        frm.Show(vbModal)
        Unload(frm)

        ShowStatusMessage "Closed View Log History form"
    End Sub
    
    Private Sub btnDownload_Click()
        
        ' is the download button captioned to check for which version is available on GitHub
        Me.MousePointer = vbHourglass
        If btnDownload.Caption = "Check for new version" Then
            ShowStatusMessage "Manual check for new version"
            GetCurrentTBVersion txttBFolderLocation.Text
            chgLogs.GetNewerReleasedVersions
        
            ' the result of checking is that no new version is available at this time
            If chgLogs.versionCheckResult = "Latest version already installed" Then
                ShowStatusMessage "none available", True
                Else
                FilltBChangeLog
                SetInitialTypeFilters
                
                If tbHelperClass.InstalledtBVersion >= chgLogs.LatestVersion Then
                    ' no newer version is available
                    ShowStatusMessage "No newer version available"
                    'btnDownload.Enabled = False
                Else
                    ShowStatusMessage "Version " & chgLogs.LatestVersion & " is available"
                    btnDownload.Caption = "Download version " & chgLogs.LatestVersion
                    btnDownload.PngIconPath = _downloadIcon
                End If
            End If
        
            Me.MousePointer = vbDefault
            Exit Sub  ' leave the sub
        End If
    
        ' use the version number to download the latest release
        ' example of the dowmload url: https://github.com/twinbasic/twinbasic/releases/download/beta-x-0641/twinBASIC_IDE_BETA_641.zip
        Dim newReleaseURL As String = githubReleasesURL & "/download/beta-x-" & IIf(chgLogs.LatestVersion < 1000, "0" & CStr(chgLogs.LatestVersion), chgLogs.LatestVersion)
        Dim justTheFileName As String = "twinBASIC_IDE_BETA_" & chgLogs.LatestVersion & ".zip"
        Dim localZipFileName As String = txtDownloadFolder.Text & justTheFileName
        Dim downloadTheZip As Boolean = True
    
        If fso.FileExists(localZipFileName) Then
            ' the zip has been downloaded already
            ShowStatusMessage "The zip exists in the download folder, redownload it?"
            'downloadTheZip = MsgBox("The file '" & localZipFileName & "' already exists. Download it again? (if no, then the current file will be used)", vbYesNo, "Previously Downloaded") = vbYes
            downloadTheZip = MessageBox("The file '" & localZipFileName & "' already exists. Download it again? (if no, then the current file will be used)", _
                "Question", "Previously Downloaded", "Yes", "No") = 1
            ShowStatusMessage IIf(downloadTheZip, " - Yes", " - No"), True
            If downloadTheZip Then fso.DeleteFile(localZipFileName)
        End If

        If downloadTheZip Then
            ShowStatusMessage "Downloading twinBasic " & chgLogs.LatestVersion
            URLDownloadToFile 0, newReleaseURL & "/" & justTheFileName, localZipFileName, 0, 0
            ShowStatusMessage " - done ", True
        End If
    
        ProcessDownloadedZip localZipFileName
    
        ShowStatusMessage "process complete"

        ' after the latest has been downloaded, set the download button to a manual check
        btnDownload.Caption = "Check for new version"
        btnDownload.PngIconPath = [_checkForNewIcon]
        
        lblCurrentTBVersion.Caption = "version: " & chgLogs.LatestVersion
        Me.MousePointer = vbDefault
        'DoEvents()
         
    End Sub
    
    Private Sub optOpenFolder_Click()
        ' if just opening the folder, you can't launch the new twinBASIC
        If loadingSettingsFromFile Then Exit Sub
        tsStartTB.IsOn = False
        tsStartTB.Enabled = False
        
        tbHelperSettings.PostDownloadAction = 1
        
        ' is the form reaf to download the zip file
        EnableDownloadZipButton
    End Sub
    
    Private Sub optOpenZip_Click()
        ' if just opening the zip, you can't launch the new twinBASIC
        If loadingSettingsFromFile Then Exit Sub
        tsStartTB.IsOn = False
        tsStartTB.Enabled = False
                
        tbHelperSettings.PostDownloadAction = 2
        
        ' is the form reaf to download the zip file
        EnableDownloadZipButton
    End Sub
    
    Private Sub optInstallTB_Click()
        
        If loadingSettingsFromFile Then Exit Sub

        ' warn the user of the process involved in installing the latest twinBASIC version
        If Not loadingSettingsFromFile Then _ 
            MessageBox("Selecting this option will delete the twinBASIC folder entirely and recreate it.", "warning", "Warning")
    
        tbHelperSettings.PostDownloadAction = 3
        
        ' is the form ready to download the zip file
        EnableDownloadZipButton
        
    End Sub

    Private Sub tfAdded_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub

    Private Sub tfFixed_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tfImportant_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub

    Private Sub tfImproved_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tfKnown_Issue_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tfTip_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tfUpdated_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tfWarning_StateChanged(ByVal TypeName As String, ByVal Active As Boolean)
        RefreshChangeLog TypeName, Active
    End Sub
    
    Private Sub tsStartTB_StateChanged(ByVal NewState As Boolean)
        tbHelperSettings.StarttwinBASICAfterUpdate = NewState
    End Sub
    
    Private Sub tsLogActivity_StateChanged(ByVal NewState As Boolean)
        tbHelperSettings.LogActivity = NewState
    End Sub
    
    Private Sub tsLookForUpdateAtLaunch_StateChanged(ByVal NewState As Boolean)
        tbHelperSettings.CheckForNewVersionOnLoad = NewState
    End Sub

    Private Sub tsSaveSettingsOnExit_StateChanged(ByVal NewState As Boolean)
        tbHelperSettings.SaveSettingsOnExit = NewState
    End Sub
    
    Private Sub txtDownloadFolder_LostFocus()
        
        If fso.FolderExists(txtDownloadFolder.Text) Then
            ' set the color to the normal background if the folders are valid
            txtDownloadFolder.BackColor = vbWhite
            
            ' complete the path
            If Right(txtDownloadFolder.Text, 1) <> "\" Then txtDownloadFolder.Text += "\"
            tbHelperSettings.DownloadFolder = txtDownloadFolder.Text
        Else
            ' indicate an invalid selection
            txtDownloadFolder.BackColor = vbRed
        End If
        
    End Sub
    
    Private Sub txttBFolderLocation_LostFocus()

        Dim newtBLocationFolder As Boolean = False
        Me.MousePointer = vbHourglass
        
        ' if there is a folder name in the textbox and folder doesn't exist, create it?
        If Not fso.FolderExists(txttBFolderLocation.Text) And Not Trim(txttBFolderLocation.Text) = "" Then
            ' ask the user if the folder should be created (like a first time setup)
            'If MsgBox("This folder doesn't exist. Should it be created?", vbYesNo, "twinBASIC Location") = vbYes Then
            If MessageBox("This folder doesn't exist. Should it be created?", "question", "twinBASIC Location", "Yes", "No") = 1 Then
                On Error Resume Next
                fso.CreateFolder(txttBFolderLocation.Text)
                If Not fso.FolderExists(txttBFolderLocation.Text) Then
                    ShowStatusMessage "Unable to create the twinBASIC folder " & txttBFolderLocation.Text & " as requested"
                    MessageBox("Unable to create the folder." & vbCrLf & Err.Description, "error", "Creation Error")
                    txttBFolderLocation.BackColor = vbRed
                    txttBFolderLocation.SetFocus()
                Else
                    txttBFolderLocation.BackColor = vbWhite
                    newtBLocationFolder = True
                    ShowStatusMessage "The twinBASIC folder " & txttBFolderLocation.Text & " was created"
                    EnableDownloadZipButton
                End If
                On Error GoTo 0
            End If
        End If
        
        ' is the folder to install twinBASIC to valid?
        If Not newtBLocationFolder Then
            ' the user didn't create a new tBFolder
            If fso.FolderExists(txttBFolderLocation.Text) Then
                ' set the color to the normal background if the folders are valid
                txttBFolderLocation.BackColor = vbWhite
            
                ' complete the path
                If Right(txttBFolderLocation.Text, 1) <> "\" Then txttBFolderLocation.Text += "\"
            
                Dim prevInstalledVersion As Integer = tbHelperClass.InstalledtBVersion
                    
                ' retrieve the current version from the selected folder
                Dim temp As String = GetCurrentTBVersion(txttBFolderLocation.Text)
            
                If Val(temp) = 0 Then
                    ' indicate an invalid selection
                    lblCurrentTBVersion.Caption = ""
                    tbHelperClass.InstalledtBVersion = 0
                    txttBFolderLocation.BackColor = vbRed
                
                    MessageBox("Folder '" & txttBFolderLocation.Text & "'; no version found.", "info", "twinBASIC version check")
                Else
                    lblCurrentTBVersion.Caption = "version: " & tbHelperClass.InstalledtBVersion
                    
                    If prevInstalledVersion <> tbHelperClass.InstalledtBVersion Then
                        ' a new location with twinBASIC was selected, if the setting for check for a new version on load then check
                        If FoldersAreValid Then
                            If tbHelperSettings.CheckForNewVersionOnLoad Then
                                CheckForNewVersion
                            Else
                                btnDownload.Caption = "Check for new version"
                                btnDownload.PngIconPath = [_checkForNewIcon]
                                btnDownload.Enabled = True
                            End If
                        End If
                        
                    End If
                End If
            Else
                ' indicate an invalid selection
                tbHelperClass.InstalledtBVersion = 0
                txttBFolderLocation.BackColor = vbRed
                lblCurrentTBVersion.Caption = ""
            End If
                        
        End If
        
        tbHelperSettings.twinBASICFolder = txttBFolderLocation.Text
        Me.MousePointer = vbDefault
    End Sub
    
    '**************************************
    '   local procedures
    '**************************************** 
    Private Sub CheckForNewVersion()
        
        ' should tBHelper look for a newer version?
        ShowStatusMessage "Checking for new version"
        chgLogs.GetNewerReleasedVersions(True)
            
        If chgLogs.tBVersionGap > 0 Then
            ' there is at least 1 new version available
            btnDownload.Caption = "Download version " & chgLogs.LatestVersion
            btnDownload.PngIconPath = [_downloadIcon]
            FilltBChangeLog()
            ShowStatusMessage "Newest version available is " & chgLogs.LatestVersion
        Else
            ShowStatusMessage "No newer version available"
        End If
           
        EnableDownloadZipButton
        
    End Sub
    
    Private Sub ConfigureToggleSlider(tsToggle As ucToggleSlider)
        
        tsToggle.OnColor = CUST_BTN_BCOLOR
        tsToggle.SlideSpeed = 3
        
    End Sub
    
    Private Sub ConfigureTypeFilterButton(tfButton As ucTypeFilter, buttonCaption As String, buttonBackColor As Long, Optional FilterText As String = "")
        
        If FilterText = "" Then FilterText = buttonCaption
        
        tfButton.BorderRadius = 3
        tfButton.TypeName = buttonCaption
        tfButton.FilterText = FilterText
        tfButton.WidthOverride = 1065
        tfButton.Backcolor = buttonBackColor
        tfButton.FontSize = 9.75
        tfButton.Enabled = False
        
    End Sub
    
    Private Sub EnableDownloadZipButton()

        ' should the download zip button be enabled?
        btnDownload.Enabled = FoldersAreValid And (chgLogs.tBVersionGap > 0 Or btnDownload.Caption = "Check for new version")
        
        If btnDownload.Enabled Then
            ' add the final forward slash if needed
            If Right(txtDownloadFolder.Text, 1) <> "\" Then txtDownloadFolder.Text += "\"
            If Right(txttBFolderLocation.Text, 1) <> "\" Then txttBFolderLocation.Text += "\"
        End If
        
    End Sub
    
    Public Sub FilltBChangeLog()
        
        ' inital write of entries to the changelog 
        Dim clItem As clsChangeLogItem
        
        lblNewVersions.Caption = ""
        
        If chgLogs.tBVersionGap > 1 Then
           
            Label9.Caption = "Change logs for "
            lblNewVersions.Caption = CStr(tbHelperClass.InstalledtBVersion + 1) & IIf(chgLogs.tBVersionGap = 2, " and ", " thru ") & chgLogs.LatestVersion
            
        ElseIf chgLogs.tBVersionGap = 1 Then
            Label9.Caption = "Change Log for "
            lblNewVersions.Caption = chgLogs.LatestVersion
        Else
            Label9.Caption = "Change Log"
        End If
        
        For Each clItem In chgLogs
            clgView.AddEntry(clItem.tBVersion, clItem.Type, clItem.Notes)
            'DoEvents()
        Next
        
    End Sub
    Private Function FoldersAreValid() As Boolean
    
        ' check to see if both folders are valid
        Dim theyAreValid As Boolean
        theyAreValid = (txtDownloadFolder.BackColor <> vbRed And Len(txtDownloadFolder.Text) > 0) And _ 
                   (txttBFolderLocation.BackColor <> vbRed And Len(txttBFolderLocation.Text) > 0)
        
        If Not theyAreValid Then
            ' TODO: indicate that there is an issue with the folder(s)
            
        End If
        
        Return theyAreValid
        
    End Function
    
    Private Sub LoadSettingsIntoForm()
    
        'Set the controls on the form with their settings values
        With Form1
            .txtDownloadFolder.Text = tbHelperSettings.DownloadFolder
            .txttBFolderLocation.Text = tbHelperSettings.twinBASICFolder
            Select Case tbHelperSettings.PostDownloadAction
                Case 1
                    .optOpenFolder.Value = True
                Case 2
                    .optOpenZip.Value = True
                Case 3
                    .optInstallTB.Value = True
            End Select
            .tsLookForUpdateAtLaunch.IsOn = tbHelperSettings.CheckForNewVersionOnLoad
            .tsStartTB.IsOn = tbHelperSettings.StarttwinBASICAfterUpdate
            .tsLogActivity.IsOn = tbHelperSettings.LogActivity
            .tsSaveSettingsOnExit.IsOn = tbHelperSettings.SaveSettingsOnExit
        End With
    
    End Sub

    Private Function MessageBox(ByVal sText As String, _
        Optional ByVal sType As String = "info", _
        Optional ByVal sTitle As String = vbNullString, _
        Optional ByVal sBtn1 As String = "OK", _
        Optional ByVal sBtn2 As String = vbNullString) As Integer
    
        MessageBox = frmMessageBox.ShowMessage(sText, sType, sTitle, sBtn1, sBtn2)
        
    End Function
    
    Private Function OptionSelection() As Integer
        
        ' return the selection for the post download process
        If optOpenFolder.Value Then
            OptionSelection = 1
            
        ElseIf optOpenZip.Value Then
            OptionSelection = 2
            
        ElseIf optInstallTB.Value Then
            OptionSelection = 3

        End If
                
    End Function
    
    Private Sub ProcessDownloadedZip(tBZipFile As String)
    
        ShowStatusMessage "Executing Post download action"
        
        ' depending on the selection, work with the zipfile downloaded
        Select Case OptionSelection
            Case 1
                ' download only - open the download folder
                ShowStatusMessage " of opening the download folder", True
                ShellExecute(0, "open", txtDownloadFolder.Text, vbNullString, vbNullString, 1)
                
            Case 2
                ' open the zip file using the default zip client
                ShowStatusMessage " of opening the zip file", True
                ShellExecute(0, "open", tBZipFile, vbNullString, vbNullString, 1)
                
            Case 3
                ' ensure the IDE is not running before attempting to unzip the latest version
                If Not IsCodeRunningInTheIDE Then
                    Do While IsProcessRunning("twinbasic.exe")
                        If MsgBox("The twinBASIC IDE is running, you can not install version " & chgLogs.LatestVersion & " while it Is open." & vbCrLf & _ 
                            "Please close the IDE or click cancel to abort.", vbCancelTryAgainContinue, "Installing twinBASIC") = vbOKCancel Then Exit Sub
                    Loop
                Else
                    MsgBox("You can not install a new version while running the project in the IDE", vbInformation, "Installing twinBASIC")
                    Exit Sub
                End If
                
                ShowStatusMessage " of installing twinBASIC", True
                If InstallTwinBasic(tBZipFile) Then
                    ShowStatusMessage "twinBASIC from " & tBZipFile & " has been extracted and is ready to use."
                    MessageBox("twinBASIC from " & tBZipFile & " has been extracted and is ready to use.", "info", "Completed")
                Else
                    ShowStatusMessage "twinBASIC from " & tBZipFile & " could not be extracted to " & tbHelperSettings.twinBASICFolder
                    MessageBox("There was a problem recreating " & tbHelperSettings.twinBASICFolder & ". The parent folder and the zip file will be opened so that you can finish the process.", "error", "Unable to complete")
                
                    ShellExecute(0, "open", tBZipFile, vbNullString, vbNullString, 1) ' open the zipfile for the user
                    ShellExecute(0, "open", GettBParentFolder, vbNullString, vbNullString, 1) ' open the folder where twinBASIC is supposed to be installed.
                
                    MessageBox("Going forward, you can open this utility as administrator to avoid this extra step.", "info", "Application Folder Rights")
                End If
                
                ' does the user want to run twinBASIC after the update
                If tsStartTB.IsOn Then
                    ShowStatusMessage "Start twinBASIC after update is checked, starting it"
                    ShellExecute(0, "open", txttBFolderLocation.Text & "\twinBASIC.exe", vbNullString, vbNullString, 1)
                    ShowStatusMessage "done", True
                End If
        End Select
        
        ShowStatusMessage "Post download action done"
    End Sub
    
    Private Sub RefreshChangeLog(FilterText As String, itsState As Boolean)

        ' display only those enteries that match the active filter buttons
        FilterText = UCase(FilterText) ' passing the name of the control instead of caption

        If itsState Then
            activeTypeFilters.Add(FilterText, FilterText)
        Else
            activeTypeFilters.Remove(FilterText)
        End If
        
        clgView.ClearEntries
        
        ' apply a filter to the listed change log
        Dim clItem As clsChangeLogItem
        For Each clItem In chgLogs
            If activeTypeFilters.Exists(UCase(clItem.Type)) Then
                clgView.AddEntry(clItem.tBVersion, clItem.Type, clItem.Notes)
            End If
            'DoEvents()
        Next
        
    End Sub

    Private Sub SetChangeLogHeader()
    
        Dim clgColumns(2) As New clsChangeLogColumn
        clgColumns(0).Name = "VERSION"
        clgColumns(0).Width = 70
        clgColumns(0).WrappedEnabled = False

        clgColumns(1).Name = "TYPE"
        clgColumns(1).Width = 140
        clgColumns(1).WrappedEnabled = False
        
        clgColumns(2).Name = "DESCRIPTION"
        clgColumns(2).Width = 550
        clgColumns(2).WrappedEnabled = True

        clgView.SetColumns = clgColumns

    End Sub
    
    Private Sub SetInitialTypeFilters()
        
        ' indicate which change log types are present and can be used to filtered the displayed change log
        Dim clType As String
        Dim tfName As String
        Dim ctrl As Control
        
        For Each clType In chgLogs.LogTypes
            ' the control names are tf'changelogtype' just using the first 5 of the type because the type Known Issue
            ' isn't a valid control name, and 5 characters is unique enough for this purpose
            tfName = UCase("tf" & Replace(clType, " ", "_"))
            For Each ctrl In Me.Controls
                If UCase(ctrl.name) = tfName Then ctrl.enabled = True
                'DoEvents()
            Next
        Next
        
        Set activeTypeFilters = chgLogs.LogTypes  ' this will hold the types that are toggled using the buttons
        
    End Sub
    
    Private Sub SetupCustomButtons()
        
        'setup the custom button user controls on the form
        ConfigureCustomButton btnDownload, "", CUST_BTN_BCOLOR, vbWhite, "", 20, True, False
        ConfigureCustomButton btnSelectDownloadFolder, "", CUST_BTN_BCOLOR, vbWhite, App.Path & "\folder.png", 20, True, False
        ConfigureCustomButton btnSelecttBFolderLocation, "", CUST_BTN_BCOLOR, vbWhite, App.Path & "\folder.png", 20, True, False
        ConfigureCustomButton btnRevert, "Revert", CUST_BTN_BCOLOR, vbWhite, App.Path & "\revert.png", 20, True, False
        ConfigureCustomButton btnViewLogHistory, "View Log History", CUST_BTN_BCOLOR, vbWhite, App.Path & "\logHistory.png", 20, True, False
         
    End Sub
        
    Private Sub SetupSettingsToggleSliders()
        
        'setup the switch user controls on the form
        ConfigureToggleSlider tsStartTB
        ConfigureToggleSlider tsLogActivity
        ConfigureToggleSlider tsLookForUpdateAtLaunch
        ConfigureToggleSlider tsSaveSettingsOnExit
    End Sub
    
    Private Sub SetupTypeFilterButtons()
        
        'setup the type filter user controls on the form
        ConfigureTypeFilterButton tfImportant, "Important", &HA2640C
        ConfigureTypeFilterButton tfKnown_Issue, "Known", vbBlack, "Known Issue"
        ConfigureTypeFilterButton tfAdded, "Added", RGB(75, 0, 130) ' indigo
        ConfigureTypeFilterButton tfImproved, "Improved", RGB(107, 142, 35) ' other green
        ConfigureTypeFilterButton tfUpdated, "Updated", RGB(107, 45, 103) ' a purple
        ConfigureTypeFilterButton tfTip, "Tip", RGB(22, 83, 126) ' blueish
        ConfigureTypeFilterButton tfWarning, "Warning", RGB(153, 0, 0) ' dark red
        ConfigureTypeFilterButton tfFixed, "Fixed", RGB(56, 118, 29) ' green
        
    End Sub

    Public Sub WriteToLogFile()
        
        ' write the contents of the displayed logs to the log history file
        Dim logFile As TextStream
        Dim logFileName As String = App.Path & "\log.txt"
        Dim tbVersionInstalled As Boolean = False
        
        Dim activityLog() As ActivityLogEntry = actLog.LogEntries
        Dim changeLog() As clsChangeLogEntry = clgView.LogEntries
        Dim algEntry As ActivityLogEntry
        
        Set logFile = fso.OpenTextFile(logFileName, ForAppending, True)
            For Each algEntry In activityLog
                logFile.WriteLine(algEntry.DateTime & ": " & algEntry.LogMessage)
                If Not tbVersionInstalled Then tbVersionInstalled = InStr(algEntry.LogMessage, "Post download") > 1 ' if the user at least downloaded the zip
            Next algEntry
        
            ' write the change log(s) for the version downloaded, plus the previous versions inbetween 
            ' the installed and the latest available installed
            If tbVersionInstalled Then
            
                ' these force the var to use a fixed length
                Dim tBVersion As String * 4
                Dim clType As String * 11
                Dim clText As String * 150
                Dim clgEntry As clsChangeLogEntry
                
                For Each clgEntry In changeLog
                    tBVersion = clgEntry.Values("VERSION")
                    clType = clgEntry.Values("TYPE")
                    clText = clgEntry.Values("DESCIPTION")
                
                    logFile.WriteLine(Format(Now, "MM/dd/yy hh:mm:ss AM/PM: ") & tBVersion & " - " & clType & IIf(Len(Trim(clType)) = 0, "", ": ") & clText)
                Next clgEntry
            End If
        logFile.Close()
        Set logFile = Nothing
        
    End Sub
   

End Class