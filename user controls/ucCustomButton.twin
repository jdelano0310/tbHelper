[Description("")]
[FormDesignerId("C0155EC8-E839-4D81-81EA-D4D67C663D1B")]
[ClassId("E87E6136-36ED-48D4-AE69-648B93EF0A12")]
[InterfaceId("8DBC5F49-9658-4FEA-8786-FDE644379673")]
[EventInterfaceId("3D66B76E-7CB0-45D1-A5B0-CB961394FDAD")]
[COMControl]
Class ucCustomButton
 
    Private m_DisabledCursor As Long
    Private m_DefaultCursor As Long
    Private m_CurrentCursor As Long
    
    ' Private variables for properties
    Private m_Caption As String
    Private m_BackColor As OLE_COLOR
    Private m_ForeColor As OLE_COLOR
    Private m_HoverColor As OLE_COLOR
    Private m_BorderColor As OLE_COLOR
    Private m_BorderRadius As Long
    Private m_BorderWidth As Long
    Private m_IconSize As Long
    Private m_IconSpacing As Long
    Private m_FontBold As Boolean
    Private m_IsHover As Boolean
    Private m_IsPressed As Boolean
    Private m_FontSize As Long

    Private m_PngPath As String
    Private m_PngBitmap As Long
    Private m_Enabled As Boolean
    Private m_ButtonWidth As Long
    Private m_ButtonHeight As Long
    
    Private m_RedrawQueued As Boolean
    
    ' Events
    Public Event Click()
    Public Event MouseEnter()
    Public Event MouseLeave()
    
    ' Properties
    Public Property Let ButtonWidth(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: ButtonWidth set to " & Value
        m_ButtonWidth = Value
        RequestRedraw
    End Property
    Public Property Get ButtonWidth() As Long
        ButtonWidth = m_ButtonWidth
    End Property
    
    Public Property Let ButtonHeight(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: ButtonHeight set to " & Value
        m_ButtonHeight = Value
        RequestRedraw
    End Property
    Public Property Get ButtonHeight() As Long
        ButtonWidth = m_ButtonHeight
    End Property
    
     Public Property Let Enabled(ByVal value As Boolean)
        ''WriteToDebugLogFile " ucCustomButton: Enabled set to " & value
        m_Enabled = value
        ApplyVisualState
        
        RequestRedraw  ' Force visual update
    End Property

    Public Property Get Enabled() As Boolean
        Enabled = m_Enabled
    End Property
    
    Public Property Let PngIconPath(ByVal Value As String)
        ''WriteToDebugLogFile " ucCustomButton: PngIconPath set to " & Value
        m_PngPath = Value
        LoadPngIcon
        RequestRedraw
    End Property
    Public Property Get PngIconPath() As String
        PngIconPath = m_PngPath
    End Property
    
    Public Property Let Caption(ByVal Value As String)
        ''WriteToDebugLogFile " ucCustomButton: Caption set to " & Value
        m_Caption = Value
        RequestRedraw
    End Property
    Public Property Get Caption() As String
        Caption = m_Caption
    End Property
    
    Public Property Let FontSize(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: FontSize set to " & Value
        m_FontSize = Value
        UserControl.FontSize = m_FontSize
        RequestRedraw
    End Property
    Public Property Get FontSize() As Long
        FontSize = m_FontSize
    End Property
    
    Public Property Let BackColor(ByVal Value As OLE_COLOR)
        ''WriteToDebugLogFile " ucCustomButton: BackColor set to " & Value
        m_BackColor = Value
        m_HoverColor = DarkenColor(Value, 0.8) ' automatically calculate the hover color
        RequestRedraw
    End Property
    Public Property Get BackColor() As OLE_COLOR
        BackColor = m_BackColor
    End Property
    
    Public Property Let ForeColor(ByVal Value As OLE_COLOR)
        ''WriteToDebugLogFile " ucCustomButton: ForeColor set to " & Value
        m_ForeColor = Value
        RequestRedraw
    End Property
    Public Property Get ForeColor() As OLE_COLOR
        ForeColor = m_ForeColor
    End Property
    
    Public Property Let HoverColor(ByVal Value As OLE_COLOR)
        ''WriteToDebugLogFile " ucCustomButton: HoverColor set to " & Value
        m_HoverColor = Value
    End Property
    Public Property Get HoverColor() As OLE_COLOR
        HoverColor = m_HoverColor
    End Property
    
    Public Property Let BorderColor(ByVal Value As OLE_COLOR)
        ''WriteToDebugLogFile " ucCustomButton: BorderColor set to " & Value
        m_BorderColor = Value
        Refresh
    End Property
    Public Property Get BorderColor() As OLE_COLOR
        BorderColor = m_BorderColor
    End Property
    
    Public Property Let BorderRadius(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: BorderRadius set to " & Value
        m_BorderRadius = Value
        ApplyRoundedRegion UserControl, m_BorderRadius
        RequestRedraw
    End Property
    Public Property Get BorderRadius() As Long
        BorderRadius = m_BorderRadius
    End Property
    
    Public Property Let BorderWidth(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: BorderWidth set to " & Value
        m_BorderWidth = Value
        RequestRedraw
    End Property
    Public Property Get BorderWidth() As Long
        BorderWidth = m_BorderWidth
    End Property
    
    Public Property Let IconSize(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: IconSize set to " & Value
        m_IconSize = Value
        RequestRedraw
    End Property
    Public Property Get IconSize() As Long
        IconSize = m_IconSize
    End Property
    
    Public Property Let IconSpacing(ByVal Value As Long)
        ''WriteToDebugLogFile " ucCustomButton: IconSpacing set to " & Value
        m_IconSpacing = Value
        RequestRedraw
    End Property
    Public Property Get IconSpacing() As Long
        IconSpacing = m_IconSpacing
    End Property
    
    Public Property Let FontBold(ByVal Value As Boolean)
        ''WriteToDebugLogFile " ucCustomButton: FontBold set to " & Value
        m_FontBold = Value
        UserControl.Font.Bold = Value
        RequestRedraw
    End Property
    Public Property Get FontBold() As Boolean
        FontBold = m_FontBold
    End Property
    
    Private Sub UserControl_Initialize()

        If Not GDIPlus_EnsureStarted() Then
            MsgBox("ucCustomButton Initialize Failure")
            Exit Sub
        End If
        
        ucDictionary.Add Me.hWnd, Me
        
        ''WriteToDebugLogFile("ucCustomButton - Initialize")
        
        ' Set default values (existing code)
        m_Caption = "Button"
        m_BackColor = &HA2640C 'RGB(37, 99, 235)
        m_ForeColor = RGB(255, 255, 255)

        m_BorderColor = &H2E5C8A
        m_BorderRadius = 4
        m_BorderWidth = 1
        m_IconSize = 20
        m_IconSpacing = 8
        m_FontBold = False
        m_IsHover = False
        m_IsPressed = False
        
        m_DefaultCursor = GetCursor ' save the default mouse cursor
        
        'get the mouse cursor that indicates the button is disabled
        m_DisabledCursor = LoadCursorFromFile(App.Path & "\disabled.cur")  ' TODO: the disabled current cursor sucks and needs to be replaced 
        
        UserControl.BackColor = m_BackColor
        UserControl.Font.Bold = m_FontBold
        
    End Sub
    
    Public Sub FlushRedrawComplete()
        m_RedrawQueued = False
    End Sub
        
    Private Sub RequestRedraw()
        
        'WriteToDebugLogFile "ucCustomButton: RequestRedraw, m_RedrawQueued is " & m_RedrawQueued & " caption: " & m_Caption
        If Not m_RedrawQueued And UserControl.hDC <> 0 Then
            QueueRedraw UserControl.hWnd
            m_RedrawQueued = True
        End If
        
    End Sub
    
    Private Sub RedrawCanvas()
        
        ' reasons to not run the RedrawCanvas routine
        If ScaleWidth <= 0 Or ScaleHeight <= 0 Then Exit Sub
        If Not GDIPlus_IsStarted() Then Exit Sub

        ''WriteToDebugLogFile "     ucCustomButton: RedrawCanvas - start for: " & IIf(m_Caption = "", m_PngPath, m_Caption)
        Cls
        
        ' Calculate positions for icon and text, all in twips
        Dim iconWidthTw As Long
        Dim iconSpacingTw As Long
        Dim textWidthTw As Long
        Dim totalContentWidthTw As Long
        Dim startXTw As Long
        Dim iconXTw As Long, iconYTw As Long
        Dim textXTw As Long, textYTw As Long

        ' Measure text (returns twips)
        textWidthTw = TextWidth(m_Caption)
        textYTw = (ScaleHeight - TextHeight(m_Caption)) \ 2

        ' Compute icon width & spacing in twips
        If m_PngBitmap <> 0 Then
            iconWidthTw = m_IconSize * Screen.TwipsPerPixelX
            iconSpacingTw = IIf(Len(m_Caption) > 0, m_IconSpacing * Screen.TwipsPerPixelX, 0)
        Else
            iconWidthTw = 0
            iconSpacingTw = 0
        End If

        ' Total width = icon + spacing + text
        totalContentWidthTw = iconWidthTw + iconSpacingTw + textWidthTw

        ' Center that block
        startXTw = (ScaleWidth - totalContentWidthTw) \ 2

        ' if there is an icon, draw it on the button
        If iconWidthTw > 0 Then
            iconXTw = startXTw
            iconYTw = (ScaleHeight - (m_IconSize * Screen.TwipsPerPixelY)) \ 2
            DrawPngIcon iconXTw, iconYTw
        End If

        ' write to the button
        textXTw = startXTw + iconWidthTw + iconSpacingTw
        CurrentX = textXTw
        CurrentY = textYTw
        Print m_Caption
        ''WriteToDebugLogFile "     ucCustomButton: RedrawCanvas -end"
        
    End Sub
    
    Private Sub ApplyVisualState()
        
        ' Determine current background color
        Dim newBackColor As OLE_COLOR
        Dim newForeColor As OLE_COLOR
        Dim newborderColor As OLE_COLOR
        
        ''WriteToDebugLogFile "     ucCustomButton: ApplyVisualState - identifier " & IIf(m_Caption = "", m_PngPath, m_Caption)
                
        If Not m_Enabled Then
            ''WriteToDebugLogFile "     ucCustomButton: ApplyVisualState - button is disabled"
            newBackColor = LightenColor(m_BackColor, 1.2)
            newForeColor = RGB(160, 160, 160)      ' softened gray for caption
            
        Else
            ''WriteToDebugLogFile "     ucCustomButton: ApplyVisualState m_IsPressed is " & m_IsPressed & " m_IsHover is " & m_IsHover
            newBackColor = IIf(m_IsPressed, LightenColor(m_BackColor, 1.2), IIf(m_IsHover, m_HoverColor, m_BackColor))
            newForeColor = m_ForeColor
        End If
        
        ' Fill background
        If UserControl.BackColor <> newBackColor Then UserControl.BackColor = newBackColor
        If UserControl.ForeColor <> newForeColor Then UserControl.ForeColor = newForeColor
        If UserControl.Font.Bold <> m_FontBold Then UserControl.Font.Bold = m_FontBold
        
        ' Draw border if specified
        If m_BorderWidth > 0 Then
            newborderColor = m_BorderColor
            
            DrawWidth = m_BorderWidth
            Line (0, 0)-(ScaleWidth - 1, ScaleHeight - 1), m_BorderColor, B
        End If
                
    End Sub
    
        
    Private Sub UserControl_Paint()
        ''WriteToDebugLogFile "     ucCustomButton: Paint - calling RedrawCanvas"
        RedrawCanvas
    End Sub
    
    Private Sub DrawPngIcon(ByVal iconX As Long, ByVal iconY As Long)
        If m_PngBitmap = 0 Then Exit Sub
    
        ' Convert twips to pixels and add positioning adjustments
        Dim pixelX As Long, pixelY As Long, pixelSize As Long
        
        pixelX = (iconX \ Screen.TwipsPerPixelX)
        pixelY = iconY \ Screen.TwipsPerPixelY
        pixelSize = m_IconSize
    
        ' Ensure icon stays within button bounds
        If pixelX < 2 Then pixelX = 2
        If pixelY < 2 Then pixelY = 2
    
        Dim hGraphics As Long, result As Long
        result = GdipCreateFromHDC(UserControl.hDC, hGraphics)
        
        If result <> 0 Or hGraphics = 0 Then Exit Sub
        
        ' Draw PNG with transparency support
        result = GdipDrawImageRectI(hGraphics, m_PngBitmap, pixelX, pixelY, m_IconSize, m_IconSize)

        ' Clean up graphics object
        Call GdipDeleteGraphics(hGraphics)
        
    End Sub
    
    Private Sub DrawLayoutDebug(ByVal iconX As Long, ByVal iconY As Long, ByVal iconWidth As Long, ByVal textX As Long, ByVal textY As Long, ByVal textWidth As Long)
        ' Draw icon bounding box in red
        Line (iconX, iconY)-Step(iconWidth * Screen.TwipsPerPixelX, m_IconSize * Screen.TwipsPerPixelY), RGB(255, 0, 0), B

        ' Draw text bounding box in green
        Line (textX, textY)-Step(textWidth, TextHeight(m_Caption)), RGB(0, 255, 0), B

        ' Optional: draw center guide
        Dim centerX As Long
        centerX = ScaleWidth \ 2
        Line (centerX, 0)-(centerX, ScaleHeight), RGB(0, 0, 255)
    End Sub
    
    Private Sub UserControl_Resize()
        ApplyRoundedRegion UserControl, m_BorderRadius
        RequestRedraw()
    End Sub
    
    Private Sub UserControl_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)

        ''WriteToDebugLogFile("        MouseMove m_Enabled: " & m_Enabled & " m_IsHover: " & m_IsHover & " button caption:  " & IIf(m_Caption = "", m_PngPath, m_Caption))
        
        ApplyVisualState
        
        If Not m_Enabled Then
            ' if the button is disabled and the mouse hovers over it, then show the disabled mouse pointer
            SetCursor m_DisabledCursor
            m_CurrentCursor = m_DisabledCursor
            Exit Sub
        Else
            ' switch the cursor if it is currently set to the disabled version
            If m_CurrentCursor = m_DisabledCursor Then
                SetCursor m_DefaultCursor
                m_CurrentCursor = m_DefaultCursor
            End If
        End If

        ' If inside and not already hovering, trigger hover
        If Not m_IsHover Then
            ''WriteToDebugLogFile("     ucCustomButton: MouseMove, set hover to true, currently timer.enabled is " & tmrMouseTracker.Enabled)
            m_IsHover = True
            RaiseEvent MouseEnter
            RequestRedraw
            tmrMouseTracker.Enabled = True
            ''WriteToDebugLogFile("     ucCustomButton: MouseMove, hover is set to true, enabled timer, button caption:  " & IIf(m_Caption = "", m_PngPath, m_Caption))
        End If
        
        ' If Not m_IsHover And tmrMouseTracker.Enabled Then
        '     ''WriteToDebugLogFile("     ucCustomButton: check for out of hover")
        '     m_IsHover = False
        '     m_IsPressed = False
        '     Refresh
        '     tmrMouseTracker.Enabled = False
        ' End If
        
    End Sub
    
    Private Sub UserControl_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        
        ''WriteToDebugLogFile "     ucCustomButton: mousedown"
        ApplyVisualState
        If Not m_Enabled Then Exit Sub

        If Button = vbLeftButton Then
            m_IsPressed = True
            RequestRedraw
            ''WriteToDebugLogFile "            ucCustomButton: mousedown - set m_IsPressed to True, called RequestRedraw, caption  " & IIf(m_Caption = "", m_PngPath, m_Caption)
        End If
    End Sub
    
    Private Sub UserControl_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        
        ''WriteToDebugLogFile "     ucCustomButton: MouseUp caption                           " & IIf(m_Caption = "", m_PngPath, m_Caption)
        ApplyVisualState
        If Not m_Enabled Then Exit Sub
        
        If Button = vbLeftButton Then
            m_IsPressed = False
            RaiseEvent Click
            ''WriteToDebugLogFile "          ucCustomButton: MouseUp: set m_IsPressed = False; caption                           " & IIf(m_Caption = "", m_PngPath, m_Caption)
            RequestRedraw
            FlushRedraws
            tmrMouseTracker.Enabled = True
        End If
    End Sub
    
    ' This event fires when the mouse leaves the UserControl area
    Private Sub UserControl_MouseLeave()
        
        ApplyVisualState
        If Not m_Enabled Then Exit Sub
                
        If m_IsHover Then
            ''WriteToDebugLogFile("           ucCustomButton: MouseLeave m_IsHover is true and set to false, caption                  " & IIf(m_Caption = "", m_PngPath, m_Caption))
            m_IsHover = False
            m_IsPressed = False
            RequestRedraw
        End If
    End Sub
    
    Private Function DarkenColor(ByVal Color As OLE_COLOR, ByVal Factor As Double) As OLE_COLOR
        
        ' Simple color darkening function used to create the mouse over color (if it isn't supplied)
        Dim r As Long, g As Long, b As Long
        r = Color And &HFF
        g = (Color And &HFF00&) \ &H100
        b = (Color And &HFF0000) \ &H10000
        
        r = CLng(r * Factor)
        g = CLng(g * Factor)
        b = CLng(b * Factor)
        
        If r > 255 Then r = 255
        If g > 255 Then g = 255
        If b > 255 Then b = 255
        
        DarkenColor = RGB(r, g, b)
    End Function
    
    Private Function LightenColor(ByVal Color As OLE_COLOR, ByVal Factor As Double) As OLE_COLOR
        
        ' used when a button is disabled.
        Dim r As Long, g As Long, b As Long
        r = (Color And &HFF) * Factor
        g = ((Color And &HFF00&) \ &H100) * Factor
        b = ((Color And &HFF0000) \ &H10000) * Factor

        If r > 255 Then r = 255
        If g > 255 Then g = 255
        If b > 255 Then b = 255

        LightenColor = RGB(r, g, b)
    End Function
    
    Private Sub UserControl_Show()
        ApplyRoundedRegion UserControl, m_BorderRadius
    End Sub

    Private Sub UserControl_Terminate()
        If m_PngBitmap <> 0 Then
            GdipDisposeImage m_PngBitmap
        End If
        
        On Error Resume Next
        GDIPlus_Release
        On Error GoTo 0
        
    End Sub

    ' Add method to load PNG file
    Private Sub LoadPngIcon()
        If m_PngBitmap <> 0 Then
            GdipDisposeImage m_PngBitmap
            m_PngBitmap = 0
        End If
    
        If Len(m_PngPath) > 0 And Dir(m_PngPath) <> "" Then
            Dim result As Long
            result = GdipCreateBitmapFromFile(StrPtr(m_PngPath), m_PngBitmap)
            If result <> 0 Then
                m_PngBitmap = 0
            End If
        End If
    End Sub
        
    Private Sub tmrMouseTracker_Timer()
        Dim pt As POINTAPI
        Dim cx As Long, cy As Long
    
        ' using this to fire either the mouseleave or the click event
        '''WriteToDebugLogFile("            ucCustomButton: tmrMouseTracker_Timer waitToDoClick is " & waitToDoClick & " m_IsHover is " & m_IsHover & " caption                      " & IIf(m_Caption = "", m_PngPath, m_Caption))
        ''WriteToDebugLogFile("            ucCustomButton: tmrMouseTracker_Timer m_IsHover is " & m_IsHover & " caption                      " & IIf(m_Caption = "", m_PngPath, m_Caption))
        
        ' where is the mouse
        GetCursorPos pt
        ScreenToClient UserControl.hWnd, pt    ' this should be more precise
        
        ' use twips of course
        cx = ScaleWidth \ Screen.TwipsPerPixelX
        cy = ScaleHeight \ Screen.TwipsPerPixelY
    
        ''WriteToDebugLogFile("            ucCustomButton: coordinates, pt.X=" & pt.X & ", pt.Y=" & pt.Y & ", cx=" & cx & ", cy=" & cy)
        
        ' compare where the mouse is to that of the location of the button
        If pt.X < 0 Or pt.Y < 0 Or pt.X >= cx Or pt.Y >= cy Then
            ''WriteToDebugLogFile("           ucCustomButton: tmrMouseTracker_Timer m_IsHover is " & m_IsHover & " caption                   " & IIf(m_Caption = "", m_PngPath, m_Caption))
            If m_IsHover Then
                ''WriteToDebugLogFile("       ucCustomButton: tmrMouseTracker_Timer set m_IsHover to false, m_IsPressed to false, raise MouseLeave, RequestRedraw, stop timer")
                m_IsHover = False
                m_IsPressed = False
                RaiseEvent MouseLeave
                ApplyVisualState
                RedrawCanvas
                tmrMouseTracker.Enabled = False
                
            End If
                        
        End If

    End Sub
        
End Class