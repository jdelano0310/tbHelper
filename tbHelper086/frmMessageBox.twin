[Description("")]
[FormDesignerId("20144C38-302E-43CC-A20B-B73D92C8BBC9")]
[PredeclaredId]
Class frmMessageBox

	Sub New()
	End Sub
    
    Public buttonNumber As Integer
    
    Public Sub ShowMessage(ByVal sText As String, _
        Optional ByVal msgType As String = "info", _
        Optional ByVal msgTitle As String = vbNullString, _
        Optional ByVal btn1Caption As String = "OK", _
        Optional ByVal btn2Caption As String = vbNullString, _
        Optional ByVal btn3Caption As String = vbNullString)

        ' Load icon based on type
        Select Case LCase$(msgType)
            Case "info": picBox.Picture = LoadPicture(App.Path & "\info.png")
            Case "warning": picBox.Picture = LoadPicture(App.Path & "\warning.png")
            Case "error": picBox.Picture = LoadPicture(App.Path & "\error.png")
            Case "success": picBox.Picture = LoadPicture(App.Path & "\success.png")
            Case "question": picBox.Picture = LoadPicture(App.Path & "\question.png")
        End Select
        
        ' setup the buttons to answer the message box
        SetupCustomButton btnNum1, btn1Caption, CUST_BTN_BCOLOR, vbWhite, "", 20, True, True
        SetupCustomButton btnNum2, btn2Caption, CUST_BTN_BCOLOR, vbWhite, "", 20, btn2Caption <> vbNullString, True
        SetupCustomButton btnNum3, btn3Caption, CUST_BTN_BCOLOR, vbWhite, "", 20, btn3Caption <> vbNullString, True
        
        btnNum2.Visible = btn2Caption <> vbNullString
        btnNum3.Visible = btn3Caption <> vbNullString
        
        RTFMessage.Message = sText
        Me.Caption = msgTitle
        
    End Sub

    Private Sub Form_Unload(Cancel As Integer)
        ' just closing using the form close button is the same as canceling
        If buttonNumber = 0 Then buttonNumber = -1
    End Sub
    
    Private Sub btnNum1_Click()
        buttonClick 1
    End Sub
    
    Private Sub btnNum2_Click()
        
        ' this will might be used for cancel, check the caption to send the proper button response
        buttonClick IIf(UCase(btnNum2.Caption) = "CANCEL", 3, 2)
    End Sub
    
    Private Sub btnNum3_Click()
        
        ' this will always be cancel if it is in use
        buttonClick 3
    End Sub
    
    Private Sub SetupCustomButton(theButton As ucCustomButton, buttonCaption As String, bkColor As OLE_COLOR, frColor As OLE_COLOR, _
        pngImagePath As String, iconSize As Integer, startEnabled As Boolean, boldFont As Boolean, _
        Optional borderColor As OLE_COLOR = 0, Optional borderWidth As Integer = 0)
        
        With theButton
            .Caption = buttonCaption
            .BackColor = bkColor
            .ForeColor = frColor
            If borderWidth > 0 Then
                .BorderColor = borderColor
                .BorderWidth = borderWidth
            End If
            .FontSize = 11
            .BorderRadius = 3
            .FontBold = boldFont
            .PngIconPath = pngImagePath
            .IconSize = iconSize
            .IconSpacing = 8
            .Enabled = startEnabled
        End With

    End Sub
    
    Private Sub buttonClick(responseNumber As Integer)
        
        ' set the response button that was clicked and hide the form from view
        WriteToDebugFile("frmMessageBox, buttonClick, buttonNumber:" & responseNumber)
        buttonNumber = responseNumber
        Me.Hide()
        
    End Sub
    
End Class