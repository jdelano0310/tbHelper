[Description("")]
[FormDesignerId("1494D659-FB65-4D11-9C71-78B34D17DDEC")]
[PredeclaredId]
Class frmRevert

	Sub New()
	End Sub
    
    Dim localVersions As String = ";"
    Dim revertToCLs As New colChangeLogItems
    Dim ignoreClickEvent As Boolean
    Dim revertToVersion As Integer
    Dim revertToVersionRequiresDownload As Boolean
    
    Private Sub Form_Load()
        
        ' display relevant current version info
        ignoreClickEvent = True
        lblCurrenttbLocation.Caption = tbHelperSettings.twinBASICFolder
        lblVersion.Caption = "contains version " & tbHelperClass.InstalledtBVersion
        
        lblCurrentDownloadFolder.Caption = tbHelperSettings.DownloadFolder

        Form1.ShowStatusMessage("Finding available zip files in the download folder (Revert)")
        FillAvailableZips
        Form1.ShowStatusMessage(" - found " & drpAvailableZips.ListCount - 1, True)
        
        ignoreClickEvent = False
        
        SetupFlexGrid
        DoEvents()
        
    End Sub
    
    Private Sub btnGetFromGitHub_Click()
        
        ' pull down the previous 10 twinBASIC versions information
        ignoreClickEvent = True
        lblAvailableZips.Caption = "Last 10 versions to revert to "
        lblCurrentDownloadFolder.Caption = lblCurrentDownloadFolder.Caption & " and GitHub"
        Form1.ShowStatusMessage("Getting last 10 versions to revert to from GitHub")
        FillGitHubZips
        Form1.ShowStatusMessage(" - done", True)
        ignoreClickEvent = False
        
    End Sub
    
    Private Sub btnRevert_Click()
        
        Form1.ShowStatusMessage("Selected to revert from version " & tbHelperClass.InstalledtBVersion & " to " & revertToVersion)
        
        ' check that the IDE is closed before attempting to revert
        If Not IsCodeRunningInTheIDE Then
            Do While IsProcessRunning("twinbasic.exe")
                Form1.ShowStatusMessage(" - not allowed while the IDE is open", True)
                If MsgBox("The twinBASIC IDE is running, you can not revert to version " & revertToVersion & " while it is open." & vbCrLf & _ 
                    "Please close the IDE or click cancel to abort.", vbOKCancel, "Reverting twinBASIC") = vbCancel Then
                    btnRevert.Enabled = False
                    Exit Sub
                End If
            Loop
            
        Else
            ' this is for my dumb ass
            MsgBox("You can not revert while running the project in the IDE", vbInformation, "Revert twinBASIC")
            Form1.ShowStatusMessage(" - not allowed while in the IDE", True)
            Exit Sub

        End If
        
        ' revert the version in the twinBASIC location
        Dim revertToZipFileName As String
        
        revertToZipFileName = tbHelperSettings.DownloadFolder & "\" & drpAvailableZips.List(drpAvailableZips.ListIndex)
        revertToZipFileName = Replace(revertToZipFileName, "[local]", "")
        
        If revertToVersionRequiresDownload Then
        
            ' the user selected a version of twinBASIC that is not available locally
            Dim revertToURL As String = githubReleasesURL & "/download/beta-x-" & IIf(revertToVersion < 1000, "0" & CStr(revertToVersion), revertToVersion)
            
            Form1.ShowStatusMessage "Revert requires downloading twinBASIC " & revertToVersion
            URLDownloadToFile 0, revertToURL & "/" & drpAvailableZips.List(drpAvailableZips.ListIndex), revertToZipFileName, 0, 0
            Form1.ShowStatusMessage " - done ", True
                
        End If
        
        Form1.ShowStatusMessage "Expanding twinBASIC " & revertToVersion
        InstallTwinBasic(revertToZipFileName)
        Form1.ShowStatusMessage " - done", True
        
    End Sub
    
    Private Sub drpAvailableZips_Click()
        
        ' the user has picked a version to revert to, display that version's change log 
        If ignoreClickEvent Then Exit Sub
        
        ' pull the version number from the zip file name
        Dim selectedVersion As Integer
        selectedVersion = Mid(drpAvailableZips.List(drpAvailableZips.ListIndex), InStr(drpAvailableZips.List(drpAvailableZips.ListIndex), "BETA_") + 5, 4)
        If Right(selectedVersion, 1) = "." Then selectedVersion = Left(selectedVersion, Len(selectedVersion) - 1)
            
        ' is this version available locally?
        ' compare the version selected against the list stored in a string when the dropdown was first filled
        revertToVersionRequiresDownload = InStr(localVersions, ";" & selectedVersion & ";") = 0
        
        revertToVersion = CInt(selectedVersion)
        
        lblChangeLogTitle.Caption = lblChangeLogTitle.Caption & " for version " & selectedVersion
        FillChangeLogGrid()
        
        btnRevert.Enabled = True
        
    End Sub
    
    Private Sub flgLog_Click()
        ' this colors the font after selecting the row
        LogGridClick(flgLog)
    End Sub
    
    ' *********************************** 
    ' ***   subs and functions
    ' ***************************************
    
    Private Sub FillAvailableZips()
        
        ' find any available local zip files to revert to
        Dim tBZipFiles As String
        Dim zipFileVersion As String
        Dim zipFileName As String
        
        tBZipFiles = Dir(tbHelperSettings.DownloadFolder & "twinBASIC_IDE_BETA_*.*")
        
        If Len(tBZipFiles) > 0 Then
            drpAvailableZips.AddItem("Select previous version")
        Else
            drpAvailableZips.AddItem("No previous versions found")
            Exit Sub
        End If
        
        Do While Len(tBZipFiles) > 0
            ' don't include the installed version zip file
            If InStr(tBZipFiles, "_" & tbHelperClass.InstalledtBVersion & ".zip") = 0 Then
            
                ' get just the filename from the full path
                zipFileName = fso.GetFileName(tBZipFiles)
                
                ' find the version number in the file name
                zipFileVersion = Mid(zipFileName, InStr(zipFileName, "BETA_") + 5, 4)
                If Right(zipFileVersion, 1) = "." Then zipFileVersion = Left(zipFileVersion, Len(zipFileVersion) - 1)
                
                ' keeping the list of revertable versions to with in 10 from the previous version 
                ' of the current installed version
                If tbHelperClass.InstalledtBVersion - 11 <= CInt(zipFileVersion) Then
                    ' save a list of the versions of available in the local zip files
                    localVersions = localVersions & zipFileVersion & ";"
                    
                    drpAvailableZips.AddItem(zipFileName)
                End If
                
            End If
            tBZipFiles = Dir()
        Loop
        
        drpAvailableZips.ListIndex = 0
        
    End Sub

    Private Sub FillChangeLogGrid()

        Dim revertToCL As clsChangeLogItem
        Dim itemColor As Long
        Dim colNum As Integer
        
         flgLog.Rows = 1
        If revertToCLs.Count > 0 Then
            ' the user clicked the get from github button
            FillGridFrom()
        Else
            Dim localLogs As New colHistoryLogItems
            
            ' check for the local log file
            If Not localLogs.LoadLog() Then
                ' there are no logs to use
                If revertToCLs Is Nothing Then GetChangeLogsFromGitHub()
                    
                FillGridFrom()
            Else
                ' there is a log file, search for the selected version change log
                Dim Li As Integer
                
                ' add the logs to the object the fill grid uses
                For Li = 1 To localLogs.Count
                    Set revertToCL = localLogs.Item(Li).LogCLI
                    If revertToCL.tBVersion = revertToVersion Then
                        revertToCLs.Add(revertToCL.tBVersion, revertToCL.Type, revertToCL.Notes)
                    End If
                    Set revertToCL = Nothing
                Next
                
                If revertToCLs.Count = 0 Then
                    ' the change log is not in the history log, fetch it from the releases page
                    GetChangeLogsFromGitHub()
                End If
                
                FillGridFrom()

            End If
            
            Set localLogs = Nothing
            
        End If
                
        Set revertToCL = Nothing
        
    End Sub
    
    Private Sub FillGitHubZips()
        
        ' display a like of the last 10 versions the user can to revert to
        Dim revertToCL As clsChangeLogItem
        Dim lastVersionAdded As Integer = 0
       
        ' load the change logs of the previous 10 twinBASIC versions, uses 11 because the newest will be ignored 
        ' if it is the same as the one installed, if not then it'll be an available version to update to
        ' just incase one is made available inbetween last check and now
        GetChangeLogsFromGitHub()
        
        drpAvailableZips.Clear()
        drpAvailableZips.AddItem("Select version to revert to")
        For Each revertToCL In revertToCLs
            
            If revertToCL.tBVersion <> tbHelperClass.InstalledtBVersion Then
                ' only need to write the versions to the dropdown once
                If revertToCL.tBVersion <> lastVersionAdded Then
                
                    ' indicate location of each version written 
                    Dim versionNote As String
                    
                    If revertToCL.tBVersion > tbHelperClass.InstalledtBVersion Then
                        versionNote = "[*NEW*]" ' found a new tB version
                    ElseIf InStr(localVersions, ";" & revertToCL.tBVersion & ";") > 1 Then
                        versionNote = "[local]" ' this is available locally
                    Else
                        versionNote = ""
                    End If
                    
                    drpAvailableZips.AddItem("twinBASIC_IDE_BETA_" & revertToCL.tBVersion & ".zip" & " " & versionNote)
                    lastVersionAdded = revertToCL.tBVersion
                End If
            End If
        Next
        
        ' check to make sure the last version is added, 
        ' if this if statement fails then page 1 of the releases page doesn't have 11 to choose from
        If lastVersionAdded = tbHelperClass.InstalledtBVersion Then
            drpAvailableZips.AddItem("twinBASIC_IDE_BETA_" & lastVersionAdded & ".zip") ' add the last one
        ElseIf lastVersionAdded < tbHelperClass.InstalledtBVersion Then
            ' 10 aren't available - adjust the caption above the dropdown list
            lblAvailableZips.Caption = "Only 9 avail from Pg:1 Releases "
        End If

        drpAvailableZips.ListIndex = 0
        
    End Sub
    
    Private Sub FillGridFrom()
        
        ' add what is in the revertToCLs object to the grid
        Dim revertToCL As clsChangeLogItem
        Dim itemColor As Long
        Dim colNum As Integer
                
        For Each revertToCL In revertToCLs
            If revertToCL.tBVersion = revertToVersion Then
                ' write each change log item for this version in the grid
                With flgLog
                    .Rows = .Rows + 1
                    .Row = .Rows - 1
                
                    .TextMatrix(.Row, 0) = revertToCL.Type
                    .TextMatrix(.Row, 1) = revertToCL.Notes
                    
                    ' color the change log of the tB version that was installed
                    ' during the logging process
                    itemColor = ChangeLogItemColor(revertToCL.Type)
                    For colNum = 0 To .Cols - 1
                        .Col = colNum
                        .CellForeColor = itemColor
                    Next
                End With
                                        
            End If
        Next
        
        ' tell the grid to resize the row for the wordwrap function on 2nd column
        flgLog.AutoSize(1, flgLog.Rows - 1, FlexAutoSizeModeRowHeight)
        
        UpdateStatusPanel "Loaded " & flgLog.Rows - 1 & " items"
        Set revertToCL = Nothing
    End Sub
    
    Private Sub GetChangeLogsFromGitHub()
        
        UpdateStatusPanel("Collecting data from Github")
            tbHelperClass.InstalledtBVersion = tbHelperClass.InstalledtBVersion - 11  ' set the code to get the 10 prev versions
            revertToCLs.GetNewerReleasedVersions()
            tbHelperClass.InstalledtBVersion = tbHelperClass.InstalledtBVersion + 11  ' return the installed version back
        UpdateStatusPanel("")
        
    End Sub
    
    Private Sub SetupFlexGrid()
    
        With flgLog
            .Row = 0
            .TextMatrix(0, 0) = "Type"
            .TextMatrix(0, 1) = "Description"
            .ColWidth(0) = 1400
            .ColWidth(1) = 8500
        End With
        
    End Sub

    Private Sub UpdateStatusPanel(statusMessags As String)
        
        lblStatus.Caption = statusMessags
        DoEvents
        
    End Sub
    
End Class